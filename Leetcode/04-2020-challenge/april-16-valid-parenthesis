// Valid Parenthesis String
// 
// Given a string containing only three types of characters: '(', ')' and '*',
// write a function to check whether this string is valid. We define the validity of a string by these rules:
//   Any left parenthesis '(' must have a corresponding right parenthesis ')'.
//   Any right parenthesis ')' must have a corresponding left parenthesis '('.
//  Left parenthesis '(' must go before the corresponding right parenthesis ')'.
//  '*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string.
//  An empty string is also valid.

class Solution {
public:
    bool checkValidString(string s) {
        std::stack<int> open;
        std::stack<int> stars;

        // balance closing parens by matching them with the opening parens
        for (int i = 0; i < s.size(); ++i) {
            if (s[i] == '*') {
                stars.push(i);
            } else if (s[i] == '(') {
                open.push(i);
            } else {
                if (!open.empty()) {
                    open.pop();
                } else if (!stars.empty()) {
                    stars.pop();
                } else {
                    return false;
                }
            }
        }
        
        // balance opening parens by converting the stars into the closing parens
        while (!open.empty() && !stars.empty()) {
            if (open.top() < stars.top()) {
                open.pop();
                stars.pop();
            } else {
                return false;
            }
        }
                
        return open.empty();
    }
};
